/**
 * Generate an automatic email address using name and phone number
 * @param firstName - Customer first name
 * @param lastName - Customer last name
 * @param phoneNumber - Customer phone number (cleaned, digits only)
 * @returns Generated email address
 */
export const generateAutomaticEmail = (
  firstName: string,
  lastName: string,
  phoneNumber: string
): string => {
  // Clean and normalize the name
  const cleanFirstName = firstName
    .toLowerCase()
    .trim()
    .replace(/[^a-zÃ¡Ã©Ã­Ã³ÃºÃ±Ã¼]/g, '') // Remove special characters, keep accented letters
    .replace(/[Ã¡Ã©Ã­Ã³Ãº]/g, (match) => {
      // Convert accented letters to their base form
      const accents: { [key: string]: string } = {
        'Ã¡': 'a', 'Ã©': 'e', 'Ã­': 'i', 'Ã³': 'o', 'Ãº': 'u'
      };
      return accents[match] || match;
    });

  const cleanLastName = lastName
    .toLowerCase()
    .trim()
    .replace(/[^a-zÃ¡Ã©Ã­Ã³ÃºÃ±Ã¼]/g, '') // Remove special characters, keep accented letters
    .replace(/[Ã¡Ã©Ã­Ã³Ãº]/g, (match) => {
      // Convert accented letters to their base form
      const accents: { [key: string]: string } = {
        'Ã¡': 'a', 'Ã©': 'e', 'Ã­': 'i', 'Ã³': 'o', 'Ãº': 'u'
      };
      return accents[match] || match;
    });

  // Clean phone number (ensure only digits)
  const cleanPhone = phoneNumber.replace(/\D/g, '');

  // Combine name parts
  const fullName = `${cleanFirstName}${cleanLastName}`;

  // If name is empty, use a default
  const namePart = fullName || 'cliente';

  // Generate email
  const email = `${namePart}@${cleanPhone}.com`;

  console.log("ðŸ“§ [generateAutomaticEmail] Generated email:", {
    firstName,
    lastName,
    phoneNumber,
    cleanFirstName,
    cleanLastName,
    cleanPhone,
    generatedEmail: email
  });

  return email;
};

/**
 * Check if an email is automatically generated (follows our pattern)
 * @param email - Email address to check
 * @returns True if the email appears to be auto-generated
 */
export const isAutoGeneratedEmail = (email: string): boolean => {
  if (!email) return false;
  
  // Pattern: name@digits.com
  const autoEmailPattern = /^[a-z]+@\d+\.com$/;
  return autoEmailPattern.test(email.toLowerCase());
};

/**
 * Extract phone number from an auto-generated email
 * @param email - Auto-generated email address
 * @returns Phone number extracted from email, or null if not auto-generated
 */
export const extractPhoneFromEmail = (email: string): string | null => {
  if (!isAutoGeneratedEmail(email)) return null;
  
  const match = email.match(/@(\d+)\.com$/);
  return match ? match[1] : null;
};
